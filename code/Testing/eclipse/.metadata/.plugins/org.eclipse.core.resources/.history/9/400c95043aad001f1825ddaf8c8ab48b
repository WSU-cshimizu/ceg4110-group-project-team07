package StepDefinations;

import io.cucumber.java.After;
import io.cucumber.java.en.*;
import io.cucumber.messages.types.Duration;

import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import java.time.Duration;


public class viewimage {

    WebDriver driver;

    @Given("I am on the Index page")
    public void iAmOnTheIndexPage() {
    	System.setProperty("webdriver.gecko.driver", "/Users/prabeshbhattarai/Downloads/eclipse/CucumberJava/src/test/resources/drivers/geckodriver");
    	driver = new FirefoxDriver();
        driver.get("https://geosyncra.netlify.app/"); 
    }

    @When("I click on the {string} link")
    public void iClickOnTheLink(String linkText) {

    	 WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
    	    
    	    // Wait for the "Viewpage" link to be clickable
    	    WebElement viewpageLink = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//a[text()='Viewpage']")));
    	    
    	    // Click on the link
    	    viewpageLink.click();
    }

    @Then("I should be redirected to the Viewpage")
    public void iShouldBeRedirectedToTheViewpage() {
        // Validate the redirection
        String currentUrl = driver.getCurrentUrl();
        Assert.assertTrue(currentUrl.contains("randomImages.html"));
    }

    @When("I click on a {string} button or link")
    public void iClickOnAButtonOrLink(String buttonText) {
        // Assuming the "View Image" button/link has the text "View Image"
        WebElement viewImageButton = driver.findElement(By.xpath("//button[text()='" + buttonText + "']"));
        viewImageButton.click();
    }

    @Then("the image should be displayed in the image container")
    public void theImageShouldBeDisplayedInTheImageContainer() {
        // Assuming image is displayed in an element with ID "imageContainer"
        WebElement imageContainer = driver.findElement(By.id("imageContainer"));
        WebElement displayedImage = imageContainer.findElement(By.tagName("img"));

        Assert.assertNotNull("Image is not displayed!", displayedImage);
        Assert.assertTrue(
            "Image source is missing or incorrect!",
            displayedImage.getAttribute("src").contains("expectedImage.jpg") // Replace with an expected file or pattern
        );
    }

    @After
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }
    }
}
